{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Saga Pattern Demo with FastAPI","text":"<p>A comprehensive implementation of the Saga Pattern for handling distributed transactions in microservices architecture, built with Python and FastAPI.</p> <p>A live version is available here.</p>"},{"location":"#overview","title":"\ud83d\udccb Overview","text":"<p>This project demonstrates how to implement the Saga pattern to maintain data consistency across multiple services without using traditional ACID transactions. The example simulates an e-commerce order processing system with multiple steps that can succeed or fail independently.</p>"},{"location":"#what-is-the-saga-pattern","title":"\ud83c\udfd7\ufe0f What is the Saga Pattern?","text":"<p>The Saga pattern is a design pattern for managing distributed transactions across multiple microservices. Instead of using a single database transaction, it breaks down a business transaction into a series of smaller, local transactions. If any step fails, the pattern executes compensating transactions to undo the completed steps.</p>"},{"location":"#key-benefits","title":"Key Benefits:","text":"<ul> <li>Data Consistency: Maintains consistency across distributed services</li> <li>Fault Tolerance: Handles failures gracefully with automatic compensation</li> <li>Scalability: Works well with microservices architecture</li> <li>Observability: Provides clear audit trail of transaction steps</li> </ul>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Orchestrator-based Saga: Centralized coordination of transaction steps</li> <li>Automatic Compensation: Failed transactions trigger compensating actions</li> <li>Step Tracking: Detailed status tracking for each transaction step</li> <li>REST API: Complete FastAPI implementation with endpoints</li> <li>Interactive Web UI: User-friendly interface for testing saga workflows</li> <li>Mock Services: Simulated inventory, payment, and shipping services</li> <li>Comprehensive Logging: Detailed logging for debugging and monitoring</li> </ul>"},{"location":"#installation-setup","title":"\ud83d\udee0\ufe0f Installation &amp; Setup","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> </ul>"},{"location":"#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Build the image: <pre><code>COMPOSE_BAKE=true docker compose build\n</code></pre></p> </li> <li> <p>Start the application: <pre><code>docker compose up\n</code></pre></p> </li> <li> <p>Access the application:</p> <ul> <li>Interactive Web UI: http://localhost:8000</li> <li>Swagger UI Documentation: http://localhost:8000/docs</li> </ul> </li> </ol>"},{"location":"#api-endpoints","title":"\ud83d\udcca API Endpoints","text":""},{"location":"#core-endpoints","title":"Core Endpoints","text":"Method Endpoint Description <code>POST</code> <code>/orders</code> Create a new order and execute saga <code>GET</code> <code>/orders</code> List all orders (most recent first) <code>GET</code> <code>/orders/{order_id}</code> Get order details <code>GET</code> <code>/sagas/{saga_id}</code> Get saga transaction details <code>GET</code> <code>/inventory</code> Get current inventory levels <code>GET</code> <code>/balances</code> Get user account balances <code>POST</code> <code>/reset</code> Reset all mock data to initial state"},{"location":"#saga-workflow-diagrams","title":"\ud83d\udcda Saga Workflow Diagrams","text":"<p>For complete workflow diagrams and visual representations of the Saga pattern implementation, please refer to the Saga Workflow.</p>"},{"location":"#testing-the-saga-pattern","title":"\ud83e\uddea Testing the Saga Pattern","text":""},{"location":"#test-data","title":"Test Data","text":"<p>Each user session starts with pre-loaded test data:</p> <p>Products:</p> <ul> <li><code>product_1</code>: 100 units</li> <li><code>product_2</code>: 50 units</li> <li><code>product_3</code>: 25 units</li> </ul> <p>Users:</p> <ul> <li><code>user_1</code>: $1000 balance</li> <li><code>user_2</code>: $500 balance</li> <li><code>user_3</code>: $200 balance</li> </ul>"},{"location":"#test-scenarios","title":"Test Scenarios","text":"<ol> <li> <p>Successful Order (Happy Path)</p> <ul> <li>Create an order with sufficient inventory and funds (e.g., <code>user_1</code>, <code>product_1</code>, <code>quantity=2</code>, <code>amount=$100</code>).</li> <li>Expected Result: All steps complete successfully, order status = <code>\"completed\"</code></li> </ul> </li> <li> <p>Insufficient Inventory</p> <ul> <li>Create an order with quantity exceeding available inventory (e.g., <code>user_1</code>, <code>product_1</code>, <code>quantity=200</code>).</li> <li>Expected Result: Inventory step fails, validation is compensated, order status = <code>\"failed\"</code></li> </ul> </li> <li> <p>Insufficient Funds</p> <ul> <li>Create an order where the user doesn't have enough balance (e.g., <code>user_3</code>, <code>product_1</code>, <code>amount=$500</code>).</li> <li>Expected Result: Payment fails, inventory is automatically released, order status = <code>\"failed\"</code></li> </ul> </li> <li> <p>Shipping Failure</p> <ul> <li>For errors that are not caused by insufficient inventory or insufficient funds (i.e., unknown or unexpected failures), we use a shipping failure as an example in this test case.</li> <li>To simplify the demo, we simulate this failure by hardcoding the logic: if the order is placed by user_3, and both the product inventory and the user\u2019s balance are sufficient, we intentionally force an error at the final shipping step.</li> <li>Expected Result: Shipping fails, payment is refunded and inventory released, order status = <code>\"failed\"</code></li> </ul> </li> </ol>"},{"location":"#saga-workflow","title":"\ud83d\udd04 Saga Workflow","text":"<p>The saga executes the following steps in sequence:</p> <ol> <li>Validate Order \u2192 Check quantity, amount, user existence</li> <li>Reserve Inventory \u2192 Reduce available stock</li> <li>Process Payment \u2192 Deduct amount from user balance</li> <li>Ship Order \u2192 Create shipment (simulated)</li> </ol>"},{"location":"#compensation-flow","title":"Compensation Flow","text":"<p>If any step fails, compensating actions execute in reverse order:</p> <ul> <li>Cancel Shipment \u2190 Undo shipping</li> <li>Refund Payment \u2190 Add money back to user</li> <li>Release Inventory \u2190 Add stock back</li> <li>Compensate Validation \u2190 Mark as compensated (no actual action needed)</li> </ul>"},{"location":"#step-status-tracking","title":"Step Status Tracking","text":"<p>Each step can have one of these statuses:</p> <ul> <li><code>pending</code>: Not yet started</li> <li><code>completed</code>: Successfully executed</li> <li><code>failed</code>: Execution failed</li> <li><code>compensated</code>: Successfully compensated after failure</li> </ul>"},{"location":"#monitoring-observability","title":"\ud83d\udcc8 Monitoring &amp; Observability","text":""},{"location":"#logging","title":"Logging","text":"<p>The application provides comprehensive logging for saga execution:</p> <pre><code>INFO:src.orchestrator:\ud83d\ude80 Starting saga abc-123 for order def-456\nINFO:src.services:\u2705 Reserved 2 units of product_1 for user_1\nINFO:src.services:\ud83d\udcb0 Processed payment of $100.0 for user_1\nINFO:src.orchestrator:\u2705 Saga abc-123 completed successfully\n</code></pre>"},{"location":"#transaction-status-tracking","title":"Transaction Status Tracking","text":"<p>Each saga maintains detailed step-by-step status:</p> <pre><code>{\n  \"saga_id\": \"abc-123\",\n  \"order_id\": \"def-456\",\n  \"status\": \"completed\",\n  \"steps\": [\n    { \"name\": \"validate_order\", \"status\": \"completed\" },\n    { \"name\": \"reserve_inventory\", \"status\": \"completed\" },\n    { \"name\": \"process_payment\", \"status\": \"completed\" },\n    { \"name\": \"ship_order\", \"status\": \"completed\" }\n  ]\n}\n</code></pre>"},{"location":"#architecture-components","title":"\ud83c\udfdb\ufe0f Architecture Components","text":""},{"location":"#services-layer","title":"Services Layer","text":"<ul> <li>ValidationService: Order validation logic</li> <li>InventoryService: Stock management</li> <li>PaymentService: Payment processing</li> <li>ShippingService: Order fulfillment simulation</li> </ul>"},{"location":"#orchestrator","title":"Orchestrator","text":"<ul> <li>SagaOrchestrator: Coordinates step execution and compensation</li> <li>Transaction State: Maintains saga status and step details</li> <li>Error Handling: Manages failures and triggers compensation</li> </ul>"},{"location":"#data-layer","title":"Data Layer","text":"<ul> <li>Mock Databases: In-memory storage for demo purposes</li> <li>Pydantic Models: Type-safe data validation</li> </ul>"},{"location":"#extending-the-demo","title":"\ud83d\udd27 Extending the Demo","text":""},{"location":"#adding-new-saga-steps","title":"Adding New Saga Steps","text":"<ol> <li> <p>Create service methods in <code>src/services.py</code>:</p> <pre><code>class NewService:\n    @staticmethod\n    async def execute_action(order: Order, session: UserSession):\n        # Implementation\n        pass\n\n    @staticmethod\n    async def compensate_action(order: Order, session: UserSession):\n        # Compensation logic\n        pass\n</code></pre> </li> <li> <p>Add to orchestrator in <code>src/orchestrator.py</code>:     <pre><code>self.steps = [\n    # ... existing steps ...\n    {\n        \"name\": \"new_step\",\n        \"action\": NewService.execute_action,\n        \"compensate\": NewService.compensate_action,\n    },\n]\n</code></pre></p> </li> </ol>"},{"location":"#adding-real-services","title":"Adding Real Services","text":"<p>Replace mock implementations with actual service calls:</p> <pre><code># src/services.py\nclass PaymentService:\n    @staticmethod\n    async def process_payment(order: Order, session: UserSession):\n        # Call actual payment gateway\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                \"https://payment-service/charge\",\n                json={\"amount\": order.amount, \"user_id\": order.user_id}\n            )\n</code></pre>"},{"location":"#database-integration","title":"Database Integration","text":"<p>Replace mock database with real database:</p> <pre><code># src/database.py\nimport asyncpg\n\nasync def get_order(order_id: str) -&gt; Order:\n    conn = await asyncpg.connect(\"postgresql://...\")\n    # Implement actual database queries\n</code></pre>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":""},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Microservices.io - Saga Pattern</li> </ul>"},{"location":"#related-patterns","title":"Related Patterns","text":"<ul> <li>Event Sourcing: Store events instead of current state</li> <li>CQRS: Separate read and write operations</li> <li>Circuit Breaker: Handle service failures gracefully</li> <li>Outbox Pattern: Reliable event publishing</li> </ul>"},{"location":"workflow/","title":"Saga Pattern Demo - Complete Workflow","text":""},{"location":"workflow/#main-saga-workflow","title":"Main Saga Workflow","text":"<pre><code>flowchart TD\n    %% API Entry Point\n    A[Client POST /orders] --&gt; B[Create Order Object]\n    B --&gt; C[Generate Order ID &amp; Saga ID]\n    C --&gt; D[Store Order in Database]\n\n    %% Saga Orchestrator Initialization\n    D --&gt; E[Saga Orchestrator: execute_saga]\n    E --&gt; F[Initialize Saga Transaction]\n    F --&gt; G[Set Status: PENDING]\n\n    %% Step 1: Validate Order\n    G --&gt; H[Step 1: Validate Order]\n    H --&gt; I{Validation Check}\n    I --&gt;|Valid| J[Mark Step: COMPLETED]\n    I --&gt;|Invalid| K[Mark Step: FAILED]\n\n    %% Step 2: Reserve Inventory\n    J --&gt; L[Step 2: Reserve Inventory]\n    L --&gt; M{Check Inventory}\n    M --&gt;|Sufficient| N[Reduce Inventory Count]\n    N --&gt; O[Mark Step: COMPLETED]\n    M --&gt;|Insufficient| P[Mark Step: FAILED]\n\n    %% Step 3: Process Payment\n    O --&gt; Q[Step 3: Process Payment]\n    Q --&gt; R{Check User Balance}\n    R --&gt;|Sufficient| S[Deduct Amount from Balance]\n    S --&gt; T[Mark Step: COMPLETED]\n    R --&gt;|Insufficient| U[Mark Step: FAILED]\n\n    %% Step 4: Ship Order\n    T --&gt; V[Step 4: Ship Order]\n    V --&gt; W{Shipping Check}\n    W --&gt;|Success| X[Mark Step: COMPLETED]\n    W --&gt;|Failure| Y[Mark Step: FAILED]\n\n    %% Success Path\n    X --&gt; Z[Set Saga Status: COMPLETED]\n    Z --&gt; AA[Set Order Status: COMPLETED]\n    AA --&gt; BB[Return Success Response]\n\n    %% Failure Paths\n    K --&gt; CC[Start Compensation]\n    P --&gt; CC\n    U --&gt; CC\n    Y --&gt; CC\n\n    %% Compensation Flow\n    CC --&gt; DD[Set Saga Status: COMPENSATING]\n    DD --&gt; EE[Compensate in Reverse Order]\n\n    %% Compensation Steps\n    EE --&gt; FF{Previous Steps Completed?}\n    FF --&gt;|Ship Completed| GG[Step 4: Cancel Shipment]\n    FF --&gt;|Payment Completed| HH[Step 3: Refund Payment]\n    FF --&gt;|Inventory Completed| II[Step 2: Release Inventory]\n    FF --&gt;|Validation Completed| JJ[Step 1: Mark Compensated]\n\n    GG --&gt; KK[Log Cancellation]\n    KK --&gt; LL[Mark Step: COMPENSATED]\n    LL --&gt; HH\n\n    HH --&gt; MM[Add Amount Back to Balance]\n    MM --&gt; NN[Mark Step: COMPENSATED]\n    NN --&gt; II\n\n    II --&gt; OO[Add Quantity Back to Inventory]\n    OO --&gt; PP[Mark Step: COMPENSATED]\n    PP --&gt; JJ\n\n    JJ --&gt; QQ[Mark Step: COMPENSATED]\n    QQ --&gt; RR[Set Saga Status: FAILED]\n    RR --&gt; SS[Set Order Status: FAILED]\n    SS --&gt; TT[Return Error Response]\n\n    %% Styling\n    classDef success fill:#d4edda,stroke:#155724,stroke-width:2px\n    classDef failure fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    classDef process fill:#d1ecf1,stroke:#0c5460,stroke-width:2px\n    classDef decision fill:#fff3cd,stroke:#856404,stroke-width:2px\n    classDef compensation fill:#f8d7da,stroke:#721c24,stroke-width:2px\n\n    class Z,AA,BB success\n    class K,P,U,Y,RR,SS,TT failure\n    class B,C,D,E,F,G,H,J,L,N,O,Q,S,T,V,X process\n    class I,M,R,W,FF decision\n    class CC,DD,EE,GG,HH,II,JJ,KK,LL,MM,NN,OO,PP,QQ compensation</code></pre>"},{"location":"workflow/#detailed-service-interactions","title":"Detailed Service Interactions","text":"<pre><code>flowchart TD\n    %% Service Layer Details\n    A[ValidationService] --&gt; A1[Check Quantity &gt; 0]\n    A1 --&gt; A2[Check Amount &gt; 0]\n    A2 --&gt; A3[Check User Exists]\n    A3 --&gt; A4[Simulate Async Processing]\n\n    B[InventoryService] --&gt; B1[Check Product Exists]\n    B1 --&gt; B2[Check Sufficient Stock]\n    B2 --&gt; B3[Reduce Inventory Count]\n    B3 --&gt; B4[Simulate Async Processing]\n\n    C[PaymentService] --&gt; C1[Check User Balance]\n    C1 --&gt; C2[Check Sufficient Funds]\n    C2 --&gt; C3[Deduct Amount]\n    C3 --&gt; C4[Simulate Async Processing]\n\n    D[ShippingService] --&gt; D1[Check Shipping Address]\n    D1 --&gt; D2{User ID Check}\n    D2 --&gt;|user_3| D3[Simulate Failure]\n    D2 --&gt;|Other Users| D4[Process Shipment]\n    D4 --&gt; D5[Simulate Async Processing]\n\n    %% Compensation Services\n    E[ValidationService.compensate] --&gt; E1[Mark as Compensated - No Action]\n\n    F[InventoryService.compensate] --&gt; F1[Add Quantity Back]\n    F1 --&gt; F2[Update Inventory DB]\n\n    G[PaymentService.compensate] --&gt; G1[Add Amount Back]\n    G1 --&gt; G2[Update User Balance]\n\n    H[ShippingService.compensate] --&gt; H1[Cancel Shipment]\n    H1 --&gt; H2[Log Cancellation]\n\n    %% Styling\n    classDef service fill:#e2e3e5,stroke:#383d41,stroke-width:2px\n    classDef compensation fill:#f8d7da,stroke:#721c24,stroke-width:2px\n\n    class A,B,C,D service\n    class E,F,G,H compensation</code></pre>"},{"location":"workflow/#api-endpoints-and-data-flow","title":"API Endpoints and Data Flow","text":"<pre><code>flowchart LR\n    %% Client Interactions\n    Client[Client Application] --&gt; POST[POST /orders]\n    Client --&gt; GET_ORDER[\"GET /orders/{id}\"]\n    Client --&gt; GET_SAGA[\"GET /sagas/{id}\"]\n    Client --&gt; GET_INV[GET /inventory]\n    Client --&gt; GET_BAL[GET /balances]\n\n    %% API Processing\n    POST --&gt; CreateOrder[Create Order]\n    GET_ORDER --&gt; FetchOrder[Fetch Order from DB]\n    GET_SAGA --&gt; FetchSaga[Fetch Saga from DB]\n    GET_INV --&gt; FetchInventory[Fetch Inventory DB]\n    GET_BAL --&gt; FetchBalances[Fetch User Balances]\n\n    %% Response Flow\n    CreateOrder --&gt; Response[Return Order + Saga ID]\n    FetchOrder --&gt; OrderResponse[Return Order Details]\n    FetchSaga --&gt; SagaResponse[Return Saga Status]\n    FetchInventory --&gt; InventoryResponse[Return Inventory Levels]\n    FetchBalances --&gt; BalanceResponse[Return User Balances]\n\n    %% Database Layer\n    CreateOrder --&gt; OrdersDB[(Orders Database)]\n    FetchOrder --&gt; OrdersDB\n    FetchSaga --&gt; SagaDB[(Saga Transactions DB)]\n    FetchInventory --&gt; InventoryDB[(Inventory Database)]\n    FetchBalances --&gt; UserDB[(User Balances DB)]\n\n    %% Styling\n    classDef client fill:#d1ecf1,stroke:#0c5460,stroke-width:2px\n    classDef api fill:#d4edda,stroke:#155724,stroke-width:2px\n    classDef db fill:#fff3cd,stroke:#856404,stroke-width:2px\n    classDef response fill:#e2e3e5,stroke:#383d41,stroke-width:2px\n\n    class Client client\n    class POST,GET_ORDER,GET_SAGA,GET_INV,GET_BAL,RESET,HEALTH api\n    class OrdersDB,SagaDB,InventoryDB,UserDB db\n    class Response,OrderResponse,SagaResponse,InventoryResponse,BalanceResponse,ResetResponse,HealthResponse response</code></pre>"},{"location":"workflow/#error-handling-and-status-transitions","title":"Error Handling and Status Transitions","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; PENDING: Order Created\n\n    PENDING --&gt; PROCESSING: Saga Started\n    PROCESSING --&gt; COMPLETED: All Steps Success\n    PROCESSING --&gt; COMPENSATING: Step Failed\n\n    COMPENSATING --&gt; FAILED: Compensation Complete\n    COMPENSATING --&gt; COMPENSATING: Continue Compensation\n\n    COMPLETED --&gt; [*]\n    FAILED --&gt; [*]\n\n    note right of PENDING\n        Initial state when order\n        is first created\n    end note\n\n    note right of PROCESSING\n        Saga orchestrator executing\n        steps sequentially\n    end note\n\n    note right of COMPENSATING\n        Executing compensation\n        actions in reverse order\n    end note\n\n    note right of COMPLETED\n        All steps successful,\n        order fulfilled\n    end note\n\n    note right of FAILED\n        Compensation complete,\n        order cancelled\n    end note</code></pre>"},{"location":"workflow/#test-scenarios-flow","title":"Test Scenarios Flow","text":"<pre><code>flowchart TD\n    %% Test Scenario 1: Success\n    A1[Test 1: Valid Order] --&gt; B1[user_1, product_1, qty=2, $100]\n    B1 --&gt; C1[All Steps Pass]\n    C1 --&gt; D1[Order: COMPLETED]\n\n    %% Test Scenario 2: Inventory Failure\n    A2[Test 2: Insufficient Inventory] --&gt; B2[user_1, product_1, qty=200]\n    B2 --&gt; C2[Inventory Step Fails]\n    C2 --&gt; D2[Compensation: Validate Order]\n    D2 --&gt; E2[Order: FAILED]\n\n    %% Test Scenario 3: Payment Failure\n    A3[Test 3: Insufficient Funds] --&gt; B3[user_3, product_1, qty=1, $500]\n    B3 --&gt; C3[Payment Step Fails]\n    C3 --&gt; D3[Compensation: Release Inventory]\n    D3 --&gt; E3[Compensation: Validate Order]\n    E3 --&gt; F3[Order: FAILED]\n\n    %% Test Scenario 4: Shipping Failure\n    A4[Test 4: Shipping Failure] --&gt; B4[user_3, product_1, qty=1, $50]\n    B4 --&gt; C4[Shipping Step Fails]\n    C4 --&gt; D4[Compensation: Refund Payment]\n    D4 --&gt; E4[Compensation: Release Inventory]\n    E4 --&gt; F4[Compensation: Validate Order]\n    F4 --&gt; G4[Order: FAILED]\n\n    %% Styling\n    classDef success fill:#d4edda,stroke:#155724,stroke-width:2px\n    classDef failure fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    classDef test fill:#e2e3e5,stroke:#383d41,stroke-width:2px\n\n    class D1 success\n    class E2,F3,G4 failure\n    class A1,A2,A3,A4 test</code></pre> <ul> <li>Note: To simplify the demo, we simulate the Shipping Failure by hardcoding the logic: if the order is placed by <code>user_3</code>, and both the product inventory and the user\u2019s balance are sufficient, we intentionally force an error at the final shipping step.</li> </ul>"},{"location":"workflow/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Orchestrator\n    participant Validation\n    participant Inventory\n    participant Payment\n    participant Shipping\n\n    Note over Client,API: Client initiates order creation\n    Client-&gt;&gt;API: POST /orders\n    Note right of API: Validate and forward order to orchestrator\n    API-&gt;&gt;Orchestrator: execute_saga(order)\n    Note right of Orchestrator: Start saga transaction\n    Orchestrator-&gt;&gt;Validation: validate_order()\n    Validation--&gt;&gt;Orchestrator: result (valid/invalid)\n    alt Validation Success\n        Note right of Orchestrator: Proceed to inventory reservation\n        Orchestrator-&gt;&gt;Inventory: reserve_inventory()\n        Inventory--&gt;&gt;Orchestrator: result (ok/fail)\n        alt Inventory Success\n            Note right of Orchestrator: Proceed to payment\n            Orchestrator-&gt;&gt;Payment: process_payment()\n            Payment--&gt;&gt;Orchestrator: result (ok/fail)\n            alt Payment Success\n                Note right of Orchestrator: Proceed to shipping\n                Orchestrator-&gt;&gt;Shipping: ship_order()\n                Shipping--&gt;&gt;Orchestrator: result (ok/fail)\n                alt Shipping Success\n                    Note over Orchestrator,API: All steps succeeded &lt;br&gt; Saga COMPLETED\n                    Orchestrator-&gt;&gt;API: saga COMPLETED\n                    API--&gt;&gt;Client: Order Success\n                else Shipping Failure\n                    Note over Orchestrator,Payment: Shipping failed &lt;br&gt; Start compensation\n                    Orchestrator-&gt;&gt;Payment: compensate_payment()\n                    Note right of Orchestrator: Compensate inventory\n                    Orchestrator-&gt;&gt;Inventory: compensate_inventory()\n                    Note right of Orchestrator: Compensate validation\n                    Orchestrator-&gt;&gt;Validation: compensate_validation()\n                    Orchestrator-&gt;&gt;API: saga FAILED\n                    API--&gt;&gt;Client: Order Failed (Shipping)\n                end\n            else Payment Failure\n                Note over Orchestrator,Inventory: Payment failed &lt;br&gt; Start compensation\n                Orchestrator-&gt;&gt;Inventory: compensate_inventory()\n                Note right of Orchestrator: Compensate validation\n                Orchestrator-&gt;&gt;Validation: compensate_validation()\n                Orchestrator-&gt;&gt;API: saga FAILED\n                API--&gt;&gt;Client: Order Failed (Payment)\n            end\n        else Inventory Failure\n            Note right of Orchestrator: Inventory reservation failed\n            Note right of Orchestrator: Compensate validation\n            Orchestrator-&gt;&gt;Validation: compensate_validation()\n            Orchestrator-&gt;&gt;API: saga FAILED\n            API--&gt;&gt;Client: Order Failed (Inventory)\n        end\n    else Validation Failure\n        Note right of Orchestrator: Validation failed\n        Orchestrator-&gt;&gt;API: saga FAILED\n        API--&gt;&gt;Client: Order Failed (Validation)\n    end</code></pre>"},{"location":"workflow/#key-features-highlighted","title":"Key Features Highlighted","text":"<ul> <li>Orchestrator-based Saga: Centralized coordination of transaction steps</li> <li>Automatic Compensation: Failed transactions trigger compensating actions</li> <li>Step-by-step Tracking: Detailed status tracking for each transaction step</li> <li>Fault Tolerance: Handles failures gracefully with automatic rollback</li> <li>REST API: Complete FastAPI implementation with comprehensive endpoints</li> <li>Mock Services: Simulated inventory, payment, and shipping services</li> <li>Comprehensive Logging: Detailed logging for debugging and monitoring</li> </ul> <p>These diagrams demonstrate how the Saga Pattern maintains data consistency across distributed services without using traditional ACID transactions, making it ideal for microservices architecture.</p>"}]}